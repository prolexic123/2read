#!/bin/bash

# check arg (should be eiher 'release' or 'test' and nothing else)
MODE=${1}
PRODUCTION_MODE="production"
DEVELOPMENT_MODE="development"
if [ "${MODE}" != "${PRODUCTION_MODE}" ] && [ "${MODE}" != "${DEVELOPMENT_MODE}" ]; then
    echo "error: unsupported mode: '${MODE}'. Please use either '${PRODUCTION_MODE}' or '${DEVELOPMENT_MODE}' as the only argument."
    exit 1
fi

echo "mode set to '${MODE}'"
exit 0

COMMIT_COMMENT=${2}

# chdir to install home directory, so we can safely use relative paths 
# to subfolder (no matter where this script was called from originally).
CD_TO_FOLDER=`dirname $0`
cd ${CD_TO_FOLDER}

# take full path to the current script base directory
BASE_DIR=`pwd`

# set GIT secret
export GIT_ASKPASS=${BASE_DIR}/src/opt/agent/config/secret/git_askpass

echo
echo
echo "You are about to push new ${MODE} which might affect operation of the whole botnet."

read -p "Are you sure you want to do this? " -n 1
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi

# cd to the root of the project
cd $(dirname $0)

echo
echo "***************************************** please review current git status (BEGIN) *****************************************"
git status
echo "***************************************** please review current git status (END) *****************************************"
echo

#TIME_NOW=`date +"%Y-%m-%d_%H-%M-%S"`	# YYYY-MM-DD_HH-MM-SS
#GIT_TAG=`ruby -e 'puts Time.now.strftime("%Y%m%d_%H%M")'`	# OLD WAY - required ruby
GIT_TAG=`date +"%Y%m%d_%H%M"`					# NEW WAY - just bash
GIT_TAG="${MODE}_${GIT_TAG}"

read -p "New tag would be: '${GIT_TAG}'. Review above git status. Continue with the new ${MODE}? " -n 1
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi
echo ""

git add --all
res=$?
if [ "$res" != "0" ]; then
    echo "failed to git add (code: ${res})"
    exit 1
else
    echo "git add succeed (code: ${res})"
fi

# commit & push to github all the changes
COMMIT_MESSAGE="${GIT_TAG} published by user `whoami` on `date`."
if [ "${COMMIT_COMMENT}" != "" ]; then
    COMMIT_MESSAGE="${COMMIT_MESSAGE} ${COMMIT_COMMENT}"
fi
git commit -m "${COMMIT_MESSAGE}"
if [ "$?" != "0" ]; then
    echo "failed to git commit"
    exit 1
else
    echo "git commit succeed (code: ${res})"
fi

git push
if [ "$?" != "0" ]; then
    echo "failed to git push"
    exit 1
else
    echo "git push succeed (code: ${res})"
fi


# # review tags
# git tag

echo "create new tag '${GIT_TAG}'"
git tag $GIT_TAG

echo "upload new tag to github"
git push origin --tags
if [ "$?" != "0" ]; then
    echo "failed to git push tags"
    exit 1
else
    echo "git push tags succeed (code: ${res})"
fi

# review status
git status

echo "***************************************** success! *****************************************"
echo
echo "${COMMIT_MESSAGE}"
echo 

# return success
exit 0
#
