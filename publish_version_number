#!/bin/bash

## set your GIT secret here:
#export GIT_ASKPASS=${BASE_DIR}/src/opt/agent/config/secret/git_askpass

# ------------------------------------------------------------------------------
# chdir to install home directory, so we can safely use relative paths 
# to subfolder (no matter where this script was called from originally).
CD_TO_FOLDER=`dirname $0`
cd ${CD_TO_FOLDER}
#cd $(dirname $0)

# take full path to the current script base directory
BASE_DIR=`pwd`

# after cd to $BASE_DIR always check if .git folder is present
GIT_FOLDER="${BASE_DIR}/.git"
if [ ! -d $GIT_FOLDER ]; then
    echo
    echo "Error: can't find folder: ${GIT_FOLDER}. Will exit now."
    echo
    exit 1
fi

# try to get tag from current git
ver=`git describe --tags --long 2> /dev/null `
get_tag_result_code=$?

if [ "${get_tag_result_code}" != "0" ]; then
    echo
    echo "Error: failed to get current version number."
    echo "       Try to call 'get_version_number' to generate very first version number for your project."
    echo
    exit 1
fi
# ---------------------------------------------------------------------------------



# ----------------------------------- [ check if git is dirty ] -------------------
#
# http://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git
#
# Changes added to the index but not committed:
# Returns "*" if the current git branch is dirty.
function git_dirty {
  [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && echo "*"
}

# For untracked files:
# Returns the number of untracked files
function git_num_untracked_files {
  expr `git status --porcelain 2>/dev/null| grep "^??" | wc -l` 
}

GIT_DIRTY=`git_dirty`

# Get number of files added to the index (but uncommitted)
ADDED_UNCOMMITTED=`expr $(git status --porcelain 2>/dev/null| grep "^M" | wc -l)`

# Get number of files that are uncommitted and not added
NOT_ADDED_UNCOMMITTED=`expr $(git status --porcelain 2>/dev/null| grep "^ M" | wc -l)`

# Get number of total uncommited files
TOTAL_UMCOMMITTED=`expr $(git status --porcelain 2>/dev/null| egrep "^(M| M)" | wc -l)`                 # "

# Get number of files to be pushed to the server
NEED_TO_PUSH_FILES=`git diff --stat origin/master  | grep "|" | wc -l `

#echo "GIT_DIRTY: '${GIT_DIRTY}'"
if [ "$GIT_DIRTY" == "*" ] || [ "${ADDED_UNCOMMITTED}" != "0" ] || [ "${ADDED_UNCOMMITTED}" != "0" ] || [ "${NOT_ADDED_UNCOMMITTED}" != "0" ] || [ "${TOTAL_UMCOMMITTED}" != "0" ] || [ "${NEED_TO_PUSH_FILES}" != "0" ]; then
    echo
    echo "Error: can't proceed, git is dirty:"

    if [ "${ADDED_UNCOMMITTED}" != "0" ]; then
	echo "       found added, but uncommited files: '${ADDED_UNCOMMITTED}'"
    fi
    if [ "${NOT_ADDED_UNCOMMITTED}" != "0" ]; then
	echo "       found not added and uncommited files: '${NOT_ADDED_UNCOMMITTED}'"
    fi
    if [ "${TOTAL_UMCOMMITTED}" != "0" ]; then
	echo "       total uncommited files: '${TOTAL_UMCOMMITTED}'"
    fi
    if [ "${NEED_TO_PUSH_FILES}" != "0" ]; then
	echo "       found files yet to be pushed to the origin: '${NEED_TO_PUSH_FILES}'"
    fi
    echo
    echo "Please test -> commit -> push all your changes prior to publishing new verstion."
    echo
    exit 1
fi


# ------------------------------------------------------------------------------

echo
echo
echo "You are about to publish new version to the origin server."

read -p "Are you sure you want to do this? [y/n] " -n 1; echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo; exit 1
fi

# cd to the root of the project (this script should be in root project folder)
cd $(dirname $0)

echo "upload new tag to the origin server"
git push origin --tags
if [ "$?" != "0" ]; then
    echo "failed to git push tags"
    exit 1
fi

echo "successfully published version to the origin server"

# return success
exit 0
